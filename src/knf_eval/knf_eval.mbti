package breakinglead/moonbite/knf_eval

alias @breakinglead/moonbite/knf as @knf
alias @breakinglead/moonbite/types as @types
alias @moonbitlang/core/immut/hashmap as @hashmap

// Values

// Types and methods
type KnfInterpreter
impl KnfInterpreter {
  add_extern_fn(Self, String, (Array[Value]) -> Value) -> Unit
  eval(Self, @hashmap.T[@types.Name, Value], @knf.Knf) -> Value!Failure
  eval_full(Self, @knf.Knf) -> Value!Failure
  new() -> Self
}

pub enum Value {
  Unit
  Int(Int)
  Double(Double)
  Tuple(Array[Value])
  Array(Array[Value])
  ExternFn(String)
  Closure(@knf.FuncDef, Ref[@hashmap.T[@types.Name, Value]])
}
impl Value {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

// Type aliases
pub typealias InterpreterLocalVars = @hashmap.T[@types.Name, Value]

pub typealias Name = @types.Name

// Traits

// Extension Methods
impl Show for Value

