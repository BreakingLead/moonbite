package breakinglead/moonbite/knf

alias @breakinglead/moonbite/types as @types
alias @moonbitlang/core/immut/hashmap as @hashmap

// Values

// Types and methods
pub struct FuncDef {
  pub name : @types.Name
  pub ty : @types.Type
  pub args : Array[Tuple[@types.Name, @types.Type]]
  pub body : Knf
}
impl FuncDef {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub enum Knf {
  Unit
  Int(Int)
  Double(Double)
  Neg(@types.Name)
  Add(@types.Name, @types.Name)
  Sub(@types.Name, @types.Name)
  Mul(@types.Name, @types.Name)
  Div(@types.Name, @types.Name)
  FNeg(@types.Name)
  FAdd(@types.Name, @types.Name)
  FSub(@types.Name, @types.Name)
  FMul(@types.Name, @types.Name)
  FDiv(@types.Name, @types.Name)
  IfEq(@types.Name, @types.Name, Knf, Knf)
  IfLe(@types.Name, @types.Name, Knf, Knf)
  Let(Tuple[@types.Name, @types.Type], Knf, Knf)
  Var(@types.Name)
  LetRec(FuncDef, Knf)
  Apply(@types.Name, Array[@types.Name])
  Tuple(Array[@types.Name])
  LetTuple(Array[Tuple[@types.Name, @types.Type]], @types.Name, Knf)
  Get(@types.Name, @types.Name)
  Put(@types.Name, @types.Name, @types.Name)
  ExternalArray(@types.Name)
  ExternalFunctionApplication(String, Array[@types.Name])
}
impl Knf {
  op_equal(Self, Self) -> Bool
  to_pretty_print(Self) -> PrettyKnf
  to_string(Self) -> String
}

type KnfEnv
impl KnfEnv {
  new(@hashmap.T[String, @types.Type]) -> Self
  opt_pass(Self, Knf) -> Knf
  syntax_preprocess(Self, @types.Syntax) -> @types.Syntax
  to_knf(Self, @types.Syntax) -> Knf
}

type PrettyKnf

// Type aliases
pub typealias LocalEnv = @hashmap.T[String, @types.Type]

pub typealias Name = @types.Name

pub typealias Type = @types.Type

// Traits

// Extension Methods
impl Show for FuncDef

impl Show for Knf

impl Show for PrettyKnf

