package breakinglead/moonbite/knf

alias @moonbitlang/core/immut/hashmap as @hashmap
alias @breakinglead/moonbite as @minimbt

// Values

// Types and methods
pub struct FuncDef {
  pub name : @minimbt.Name
  pub ty : @minimbt.Type
  pub args : Array[Tuple[@minimbt.Name, @minimbt.Type]]
  pub body : Knf
}
impl FuncDef {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub enum Knf {
  Unit
  Int(Int)
  Double(Double)
  Neg(@minimbt.Name)
  Add(@minimbt.Name, @minimbt.Name)
  Sub(@minimbt.Name, @minimbt.Name)
  Mul(@minimbt.Name, @minimbt.Name)
  Div(@minimbt.Name, @minimbt.Name)
  FNeg(@minimbt.Name)
  FAdd(@minimbt.Name, @minimbt.Name)
  FSub(@minimbt.Name, @minimbt.Name)
  FMul(@minimbt.Name, @minimbt.Name)
  FDiv(@minimbt.Name, @minimbt.Name)
  IfEq(@minimbt.Name, @minimbt.Name, Knf, Knf)
  IfLe(@minimbt.Name, @minimbt.Name, Knf, Knf)
  Let(Tuple[@minimbt.Name, @minimbt.Type], Knf, Knf)
  Var(@minimbt.Name)
  LetRec(FuncDef, Knf)
  Apply(@minimbt.Name, Array[@minimbt.Name])
  Tuple(Array[@minimbt.Name])
  LetTuple(Array[Tuple[@minimbt.Name, @minimbt.Type]], @minimbt.Name, Knf)
  Get(@minimbt.Name, @minimbt.Name)
  Put(@minimbt.Name, @minimbt.Name, @minimbt.Name)
  ExternalArray(@minimbt.Name)
  ExternalFunctionApplication(String, Array[@minimbt.Name])
}
impl Knf {
  op_equal(Self, Self) -> Bool
  to_pretty_print(Self) -> PrettyKnf
  to_string(Self) -> String
}

type KnfEnv
impl KnfEnv {
  new(@hashmap.T[String, @minimbt.Type]) -> Self
  opt_pass(Self, Knf) -> Knf
  syntax_preprocess(Self, @minimbt.Syntax) -> @minimbt.Syntax
  to_knf(Self, @minimbt.Syntax) -> Knf
}

type PrettyKnf

// Type aliases
pub typealias LocalEnv = @hashmap.T[String, @minimbt.Type]

pub typealias Name = @minimbt.Name

pub typealias Type = @minimbt.Type

// Traits

// Extension Methods
impl Show for FuncDef

impl Show for Knf

impl Show for PrettyKnf

