package breakinglead/moonbite/closure

alias @breakinglead/moonbite/knf as @knf
alias @breakinglead/moonbite/types as @types

// Values
fn knf_program_to_closure(@knf.Knf, Map[String, @types.Type]) -> Program

// Types and methods
pub struct Closure {
  pub name : Label
  pub actual_free_vars : Array[@types.Name]
}
impl Closure {
  to_string(Self) -> String
}

pub enum Expr {
  Unit
  Int(Int)
  Double(Double)
  Neg(@types.Name)
  Add(@types.Name, @types.Name)
  Sub(@types.Name, @types.Name)
  Mul(@types.Name, @types.Name)
  Div(@types.Name, @types.Name)
  FNeg(@types.Name)
  FAdd(@types.Name, @types.Name)
  FSub(@types.Name, @types.Name)
  FMul(@types.Name, @types.Name)
  FDiv(@types.Name, @types.Name)
  IfEq(@types.Name, @types.Name, Expr, Expr)
  IfLe(@types.Name, @types.Name, Expr, Expr)
  Let(Tuple[@types.Name, LowType], Expr, Expr)
  Var(@types.Name)
  MakeClosure(Tuple[@types.Name, LowType], Closure, Expr)
  CallClosure(@types.Name, Array[@types.Name])
  CallDirect(Label, Array[@types.Name])
  MakeTuple(Array[@types.Name])
  LetTuple(Array[Tuple[@types.Name, LowType]], @types.Name, Expr)
  ArrayGet(@types.Name, @types.Name)
  ArrayPut(@types.Name, @types.Name, @types.Name)
  ExternalArray(Label)
}
impl Expr {
  to_string(Self) -> String
}

pub struct FuncDef {
  pub name : Label
  pub old_name : @types.Name
  pub ty : LowType
  pub args : Array[Tuple[@types.Name, LowType]]
  pub formal_free_vars : Array[Tuple[@types.Name, LowType]]
  pub body : Expr
}
impl FuncDef {
  to_string(Self) -> String
}

pub type Label String
impl Label {
  to_string(Self) -> String
}

pub enum LowType {
  Unit
  Bool
  Int
  Double
  ClosureFn(Array[LowType], LowType)
  DirectFn(Array[LowType], LowType)
  Tuple(Array[LowType])
  Array(LowType)
  Ptr
}
impl LowType {
  is_float_like(Self) -> Bool
  is_ptr_like(Self) -> Bool
  size_of(Self, Int) -> Int
  to_string(Self) -> String
}

pub struct Program {
  pub fundefs : Array[FuncDef]
  pub body : Expr
}
impl Program {
  to_string(Self) -> String
}

// Type aliases
pub typealias LocalEnv = @moonbitlang/core/immut/hashmap.T[@types.Name, LowType]

pub typealias Name = @types.Name

pub typealias Type = @types.Type

// Traits

// Extension Methods
impl Show for Closure

impl Show for Expr

impl Show for FuncDef

impl Show for Label

impl Show for LowType

impl Show for Program

