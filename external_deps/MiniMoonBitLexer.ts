// Generated from MiniMoonBit.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MiniMoonBitLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly TRUE = 5;
	public static readonly FALSE = 6;
	public static readonly UNIT = 7;
	public static readonly BOOL = 8;
	public static readonly INT = 9;
	public static readonly DOUBLE = 10;
	public static readonly ARRAY = 11;
	public static readonly NOT = 12;
	public static readonly IF = 13;
	public static readonly ELSE = 14;
	public static readonly FN = 15;
	public static readonly LET = 16;
	public static readonly NUMBER = 17;
	public static readonly IDENTIFIER = 18;
	public static readonly DOT = 19;
	public static readonly ADD = 20;
	public static readonly SUB = 21;
	public static readonly MUL = 22;
	public static readonly DIV = 23;
	public static readonly ASSIGN = 24;
	public static readonly EQ = 25;
	public static readonly LE = 26;
	public static readonly LPAREN = 27;
	public static readonly RPAREN = 28;
	public static readonly LBRACKET = 29;
	public static readonly RBRACKET = 30;
	public static readonly LCURLYBRACKET = 31;
	public static readonly RCURLYBRACKET = 32;
	public static readonly ARROW = 33;
	public static readonly COLON = 34;
	public static readonly SEMICOLON = 35;
	public static readonly COMMA = 36;
	public static readonly WS = 37;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "TRUE", "FALSE", "UNIT", "BOOL", "INT", 
		"DOUBLE", "ARRAY", "NOT", "IF", "ELSE", "FN", "LET", "NUMBER", "IDENTIFIER", 
		"DOT", "ADD", "SUB", "MUL", "DIV", "ASSIGN", "EQ", "LE", "LPAREN", "RPAREN", 
		"LBRACKET", "RBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", "ARROW", "COLON", 
		"SEMICOLON", "COMMA", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'main'", "'init'", "'::'", "'make'", "'true'", "'false'", 
		"'Unit'", "'Bool'", "'Int'", "'Double'", "'Array'", "'not'", "'if'", "'else'", 
		"'fn'", "'let'", undefined, undefined, "'.'", "'+'", "'-'", "'*'", "'/'", 
		"'='", "'=='", "'<='", "'('", "')'", "'['", "']'", "'{'", "'}'", "'->'", 
		"':'", "';'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "TRUE", "FALSE", 
		"UNIT", "BOOL", "INT", "DOUBLE", "ARRAY", "NOT", "IF", "ELSE", "FN", "LET", 
		"NUMBER", "IDENTIFIER", "DOT", "ADD", "SUB", "MUL", "DIV", "ASSIGN", "EQ", 
		"LE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LCURLYBRACKET", "RCURLYBRACKET", 
		"ARROW", "COLON", "SEMICOLON", "COMMA", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MiniMoonBitLexer._LITERAL_NAMES, MiniMoonBitLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MiniMoonBitLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MiniMoonBitLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MiniMoonBit.g4"; }

	// @Override
	public get ruleNames(): string[] { return MiniMoonBitLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MiniMoonBitLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MiniMoonBitLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MiniMoonBitLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\'\xD2\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12" +
		"\x06\x12\x9A\n\x12\r\x12\x0E\x12\x9B\x03\x13\x03\x13\x07\x13\xA0\n\x13" +
		"\f\x13\x0E\x13\xA3\v\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16" +
		"\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03$" +
		"\x03$\x03%\x03%\x03&\x06&\xCD\n&\r&\x0E&\xCE\x03&\x03&\x02\x02\x02\'\x03" +
		"\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t" +
		"\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02" +
		"\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17" +
		"-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F" +
		"=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'\x03\x02\x06\x03\x02" +
		"2;\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\xD4\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15" +
		"\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B" +
		"\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02" +
		"\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02" +
		"\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03" +
		"\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02" +
		"\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02" +
		"C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02" +
		"\x02\x02\x02K\x03\x02\x02\x02\x03M\x03\x02\x02\x02\x05R\x03\x02\x02\x02" +
		"\x07W\x03\x02\x02\x02\tZ\x03\x02\x02\x02\v_\x03\x02\x02\x02\rd\x03\x02" +
		"\x02\x02\x0Fj\x03\x02\x02\x02\x11o\x03\x02\x02\x02\x13t\x03\x02\x02\x02" +
		"\x15x\x03\x02\x02\x02\x17\x7F\x03\x02\x02\x02\x19\x85\x03\x02\x02\x02" +
		"\x1B\x89\x03\x02\x02\x02\x1D\x8C\x03\x02\x02\x02\x1F\x91\x03\x02\x02\x02" +
		"!\x94\x03\x02\x02\x02#\x99\x03\x02\x02\x02%\x9D\x03\x02\x02\x02\'\xA4" +
		"\x03\x02\x02\x02)\xA6\x03\x02\x02\x02+\xA8\x03\x02\x02\x02-\xAA\x03\x02" +
		"\x02\x02/\xAC\x03\x02\x02\x021\xAE\x03\x02\x02\x023\xB0\x03\x02\x02\x02" +
		"5\xB3\x03\x02\x02\x027\xB6\x03\x02\x02\x029\xB8\x03\x02\x02\x02;\xBA\x03" +
		"\x02\x02\x02=\xBC\x03\x02\x02\x02?\xBE\x03\x02\x02\x02A\xC0\x03\x02\x02" +
		"\x02C\xC2\x03\x02\x02\x02E\xC5\x03\x02\x02\x02G\xC7\x03\x02\x02\x02I\xC9" +
		"\x03\x02\x02\x02K\xCC\x03\x02\x02\x02MN\x07o\x02\x02NO\x07c\x02\x02OP" +
		"\x07k\x02\x02PQ\x07p\x02\x02Q\x04\x03\x02\x02\x02RS\x07k\x02\x02ST\x07" +
		"p\x02\x02TU\x07k\x02\x02UV\x07v\x02\x02V\x06\x03\x02\x02\x02WX\x07<\x02" +
		"\x02XY\x07<\x02\x02Y\b\x03\x02\x02\x02Z[\x07o\x02\x02[\\\x07c\x02\x02" +
		"\\]\x07m\x02\x02]^\x07g\x02\x02^\n\x03\x02\x02\x02_`\x07v\x02\x02`a\x07" +
		"t\x02\x02ab\x07w\x02\x02bc\x07g\x02\x02c\f\x03\x02\x02\x02de\x07h\x02" +
		"\x02ef\x07c\x02\x02fg\x07n\x02\x02gh\x07u\x02\x02hi\x07g\x02\x02i\x0E" +
		"\x03\x02\x02\x02jk\x07W\x02\x02kl\x07p\x02\x02lm\x07k\x02\x02mn\x07v\x02" +
		"\x02n\x10\x03\x02\x02\x02op\x07D\x02\x02pq\x07q\x02\x02qr\x07q\x02\x02" +
		"rs\x07n\x02\x02s\x12\x03\x02\x02\x02tu\x07K\x02\x02uv\x07p\x02\x02vw\x07" +
		"v\x02\x02w\x14\x03\x02\x02\x02xy\x07F\x02\x02yz\x07q\x02\x02z{\x07w\x02" +
		"\x02{|\x07d\x02\x02|}\x07n\x02\x02}~\x07g\x02\x02~\x16\x03\x02\x02\x02" +
		"\x7F\x80\x07C\x02\x02\x80\x81\x07t\x02\x02\x81\x82\x07t\x02\x02\x82\x83" +
		"\x07c\x02\x02\x83\x84\x07{\x02\x02\x84\x18\x03\x02\x02\x02\x85\x86\x07" +
		"p\x02\x02\x86\x87\x07q\x02\x02\x87\x88\x07v\x02\x02\x88\x1A\x03\x02\x02" +
		"\x02\x89\x8A\x07k\x02\x02\x8A\x8B\x07h\x02\x02\x8B\x1C\x03\x02\x02\x02" +
		"\x8C\x8D\x07g\x02\x02\x8D\x8E\x07n\x02\x02\x8E\x8F\x07u\x02\x02\x8F\x90" +
		"\x07g\x02\x02\x90\x1E\x03\x02\x02\x02\x91\x92\x07h\x02\x02\x92\x93\x07" +
		"p\x02\x02\x93 \x03\x02\x02\x02\x94\x95\x07n\x02\x02\x95\x96\x07g\x02\x02" +
		"\x96\x97\x07v\x02\x02\x97\"\x03\x02\x02\x02\x98\x9A\t\x02\x02\x02\x99" +
		"\x98\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x99\x03\x02\x02\x02\x9B" +
		"\x9C\x03\x02\x02\x02\x9C$\x03\x02\x02\x02\x9D\xA1\t\x03\x02\x02\x9E\xA0" +
		"\t\x04\x02\x02\x9F\x9E\x03\x02\x02\x02\xA0\xA3\x03\x02\x02\x02\xA1\x9F" +
		"\x03\x02\x02\x02\xA1\xA2\x03\x02\x02\x02\xA2&\x03\x02\x02\x02\xA3\xA1" +
		"\x03\x02\x02\x02\xA4\xA5\x070\x02\x02\xA5(\x03\x02\x02\x02\xA6\xA7\x07" +
		"-\x02\x02\xA7*\x03\x02\x02\x02\xA8\xA9\x07/\x02\x02\xA9,\x03\x02\x02\x02" +
		"\xAA\xAB\x07,\x02\x02\xAB.\x03\x02\x02\x02\xAC\xAD\x071\x02\x02\xAD0\x03" +
		"\x02\x02\x02\xAE\xAF\x07?\x02\x02\xAF2\x03\x02\x02\x02\xB0\xB1\x07?\x02" +
		"\x02\xB1\xB2\x07?\x02\x02\xB24\x03\x02\x02\x02\xB3\xB4\x07>\x02\x02\xB4" +
		"\xB5\x07?\x02\x02\xB56\x03\x02\x02\x02\xB6\xB7\x07*\x02\x02\xB78\x03\x02" +
		"\x02\x02\xB8\xB9\x07+\x02\x02\xB9:\x03\x02\x02\x02\xBA\xBB\x07]\x02\x02" +
		"\xBB<\x03\x02\x02\x02\xBC\xBD\x07_\x02\x02\xBD>\x03\x02\x02\x02\xBE\xBF" +
		"\x07}\x02\x02\xBF@\x03\x02\x02\x02\xC0\xC1\x07\x7F\x02\x02\xC1B\x03\x02" +
		"\x02\x02\xC2\xC3\x07/\x02\x02\xC3\xC4\x07@\x02\x02\xC4D\x03\x02\x02\x02" +
		"\xC5\xC6\x07<\x02\x02\xC6F\x03\x02\x02\x02\xC7\xC8\x07=\x02\x02\xC8H\x03" +
		"\x02\x02\x02\xC9\xCA\x07.\x02\x02\xCAJ\x03\x02\x02\x02\xCB\xCD\t\x05\x02" +
		"\x02\xCC\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE\xCC\x03\x02\x02" +
		"\x02\xCE\xCF\x03\x02\x02\x02\xCF\xD0\x03\x02\x02\x02\xD0\xD1\b&\x02\x02" +
		"\xD1L\x03\x02\x02\x02\x06\x02\x9B\xA1\xCE\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MiniMoonBitLexer.__ATN) {
			MiniMoonBitLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MiniMoonBitLexer._serializedATN));
		}

		return MiniMoonBitLexer.__ATN;
	}

}

